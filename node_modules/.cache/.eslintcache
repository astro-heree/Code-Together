[{"/Users/amankumar/Code-Together/src/index.js":"1","/Users/amankumar/Code-Together/src/App.jsx":"2","/Users/amankumar/Code-Together/src/pages/Home.jsx":"3","/Users/amankumar/Code-Together/src/pages/EditorPage.jsx":"4","/Users/amankumar/Code-Together/src/Actions.js":"5","/Users/amankumar/Code-Together/src/socket.js":"6","/Users/amankumar/Code-Together/src/components/Client.jsx":"7","/Users/amankumar/Code-Together/src/components/Editor.jsx":"8","/Users/amankumar/Code-Together/src/components/CodeRun.jsx":"9","/Users/amankumar/Code-Together/src/contexts/LiveKitContext.jsx":"10","/Users/amankumar/Code-Together/src/components/MediaControls.jsx":"11"},{"size":211,"mtime":1749137026861,"results":"12","hashOfConfig":"13"},{"size":855,"mtime":1749142253265,"results":"14","hashOfConfig":"13"},{"size":2231,"mtime":1749138899070,"results":"15","hashOfConfig":"13"},{"size":8185,"mtime":1749147151592,"results":"16","hashOfConfig":"13"},{"size":200,"mtime":1749141962382,"results":"17","hashOfConfig":"13"},{"size":435,"mtime":1749141542236,"results":"18","hashOfConfig":"13"},{"size":5107,"mtime":1749149246472,"results":"19","hashOfConfig":"13"},{"size":1914,"mtime":1749141647999,"results":"20","hashOfConfig":"13"},{"size":2967,"mtime":1749141962383,"results":"21","hashOfConfig":"13"},{"size":12956,"mtime":1749149280255,"results":"22","hashOfConfig":"13"},{"size":724,"mtime":1749142191823,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"ax8kgz",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"27"},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/amankumar/Code-Together/src/index.js",[],[],[],"/Users/amankumar/Code-Together/src/App.jsx",[],[],"/Users/amankumar/Code-Together/src/pages/Home.jsx",[],[],"/Users/amankumar/Code-Together/src/pages/EditorPage.jsx",["59","60"],[],"/Users/amankumar/Code-Together/src/Actions.js",[],[],"/Users/amankumar/Code-Together/src/socket.js",[],[],"/Users/amankumar/Code-Together/src/components/Client.jsx",[],[],"/Users/amankumar/Code-Together/src/components/Editor.jsx",["61","62","63"],[],"import React, { useEffect } from 'react';\nimport codemirror from 'codemirror';\nimport 'codemirror/mode/javascript/javascript';\nimport 'codemirror/theme/dracula.css';\nimport 'codemirror/addon/edit/closetag';\nimport 'codemirror/addon/edit/closebrackets';\nimport 'codemirror/lib/codemirror.css'\nimport { useRef } from 'react';\nimport ACTIONS from '../Actions';\n\nconst Editor = ({ socketRef, roomId, onCodeChange }) => {\n  const editorRef = useRef(null);\n\n  useEffect(() => {\n    const init = async () => {\n      editorRef.current = codemirror.fromTextArea(\n        document.getElementById(\"realtimeEditor\"),\n        {\n          mode: { name: \"javascript\", json: true },\n          theme: \"dracula\",\n          autoCloseTags: true,\n          autoCloseBrackets: true,\n          lineNumbers: true,\n        }\n      );\n\n      editorRef.current.on(\"change\", (instance, changes) => {\n        const { origin } = changes;\n        const code = instance.getValue();\n        onCodeChange(code);\n\n        if (origin !== \"setValue\" && socketRef.current && socketRef.current.connected) {\n          socketRef.current.emit(ACTIONS.CODE_CHANGE, {\n            roomId,\n            code,\n          });\n        }\n      });\n    };\n\n    init();\n  }, []);\n\n  useEffect(() => {\n    if (socketRef.current && editorRef.current) {\n      const handleCodeChange = ({ code }) => {\n        if (code !== null && editorRef.current) {\n          const currentCode = editorRef.current.getValue();\n          if (currentCode !== code) {\n            editorRef.current.setValue(code);\n          }\n        }\n      };\n\n      socketRef.current.on(ACTIONS.CODE_CHANGE, handleCodeChange);\n\n      return () => {\n        if (socketRef.current) {\n          socketRef.current.off(ACTIONS.CODE_CHANGE, handleCodeChange);\n        }\n      };\n    }\n  }, [socketRef.current, editorRef.current]);\n\n  return <textarea id=\"realtimeEditor\"></textarea>;\n};\n\nexport default Editor;","/Users/amankumar/Code-Together/src/components/CodeRun.jsx",[],[],"/Users/amankumar/Code-Together/src/contexts/LiveKitContext.jsx",["64"],[],"/Users/amankumar/Code-Together/src/components/MediaControls.jsx",[],[],{"ruleId":"65","severity":1,"message":"66","line":35,"column":18,"nodeType":"67","messageId":"68","endLine":35,"endColumn":36},{"ruleId":"69","severity":1,"message":"70","line":162,"column":6,"nodeType":"71","endLine":162,"endColumn":8,"suggestions":"72"},{"ruleId":"69","severity":1,"message":"73","line":42,"column":6,"nodeType":"71","endLine":42,"endColumn":8,"suggestions":"74"},{"ruleId":"69","severity":1,"message":"75","line":59,"column":21,"nodeType":"67","endLine":59,"endColumn":28},{"ruleId":"69","severity":1,"message":"76","line":63,"column":6,"nodeType":"71","endLine":63,"endColumn":44,"suggestions":"77"},{"ruleId":"65","severity":1,"message":"78","line":141,"column":21,"nodeType":"67","messageId":"68","endLine":141,"endColumn":29},"no-unused-vars","'isLiveKitConnected' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'connectToLiveKit', 'disconnectFromRoom', 'location.state?.username', 'reactNavigator', and 'roomId'. Either include them or remove the dependency array.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'onCodeChange', 'roomId', and 'socketRef'. Either include them or remove the dependency array. If 'onCodeChange' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["80"],"The ref value 'socketRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'socketRef.current' to a variable inside the effect, and use that variable in the cleanup function.","React Hook useEffect has a missing dependency: 'socketRef'. Either include it or remove the dependency array. Mutable values like 'socketRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["81"],"'identity' is assigned a value but never used.",{"desc":"82","fix":"83"},{"desc":"84","fix":"85"},{"desc":"86","fix":"87"},"Update the dependencies array to be: [connectToLiveKit, disconnectFromRoom, location.state?.username, reactNavigator, roomId]",{"range":"88","text":"89"},"Update the dependencies array to be: [onCodeChange, roomId, socketRef]",{"range":"90","text":"91"},"Update the dependencies array to be: [socketRef]",{"range":"92","text":"93"},[5282,5284],"[connectToLiveKit, disconnectFromRoom, location.state?.username, reactNavigator, roomId]",[1221,1223],"[onCodeChange, roomId, socketRef]",[1794,1832],"[socketRef]"]